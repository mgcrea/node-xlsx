{"version":3,"sources":["../src/helpers.js"],"names":["isBoolean","maybeBoolean","isNumber","maybeNumber","isString","maybeString","isObject","maybeObject","isCellDescriptor","maybeCell","originDate","Date","UTC","buildExcelDate","value","is1904","epoch","parse","buildSheetFromMatrix","data","options","workSheet","range","s","c","r","e","Array","isArray","Error","R","length","C","cell","v","cellRef","XLSX","utils","encode_cell","t","z","SSF","_table","encode_range","key","test","Object","assign"],"mappings":"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","file":"helpers.js","sourcesContent":["import XLSX from 'xlsx';\n\nconst isBoolean = maybeBoolean => typeof maybeBoolean === 'boolean';\nconst isNumber = maybeNumber => typeof maybeNumber === 'number';\nconst isString = maybeString => typeof maybeString === 'string';\nconst isObject = maybeObject => maybeObject !== null && typeof maybeObject === 'object';\nconst isCellDescriptor = maybeCell => isObject(maybeCell) && 'v' in maybeCell;\n\nconst originDate = new Date(Date.UTC(1899, 11, 30));\n\nconst buildExcelDate = (value, is1904) => {\n  const epoch = Date.parse(value + (is1904 ? 1462 : 0));\n  return (epoch - originDate) / (864e5);\n};\n\nconst buildSheetFromMatrix = (data, options = {}) => {\n  const workSheet = {};\n  const range = {s: {c: 1e7, r: 1e7}, e: {c: 0, r: 0}};\n\n  if (!Array.isArray(data)) throw new Error('sheet data is not array');\n\n  for (let R = 0; R !== data.length; R += 1) {\n    for (let C = 0; C !== data[R].length; C += 1) {\n      if (!Array.isArray(data[R])) throw new Error(`${R}th row data is not array`);\n\n      if (range.s.r > R) range.s.r = R;\n      if (range.s.c > C) range.s.c = C;\n      if (range.e.r < R) range.e.r = R;\n      if (range.e.c < C) range.e.c = C;\n      if (data[R][C] === null) {\n        continue; // eslint-disable-line\n      }\n      const cell = isCellDescriptor(data[R][C]) ? data[R][C] : {v: data[R][C]};\n      const cellRef = XLSX.utils.encode_cell({c: C, r: R});\n      if (isNumber(cell.v)) {\n        cell.t = 'n';\n      } else if (isBoolean(cell.v)) {\n        cell.t = 'b';\n      } else if (cell.v instanceof Date) {\n        cell.t = 'n';\n        cell.v = buildExcelDate(cell.v);\n        cell.z = cell.z || XLSX.SSF._table[14]; // eslint-disable-line no-underscore-dangle\n      } else {\n        cell.t = 's';\n      }\n      if (isNumber(cell.z)) cell.z = XLSX.SSF._table[cell.z]; // eslint-disable-line no-underscore-dangle\n      workSheet[cellRef] = cell;\n    }\n  }\n  if (range.s.c < 1e7) {\n    workSheet['!ref'] = XLSX.utils.encode_range(range);\n  }\n  if (options['!cols']) {\n    workSheet['!cols'] = options['!cols'];\n  }\n  if (options['!merges']) {\n    workSheet['!merges'] = options['!merges'];\n  }\n  // Support for setting up a single cell\n  for (let key in options) {\n    if (/^[A-Z]+\\d+$/.test(key)) {\n      workSheet[key]? \n        workSheet[key] = Object.assign(workSheet[key], options[key]) :\n        workSheet[key] = options[key];\n    }\n  }\n  return workSheet;\n};\n\nexport {buildSheetFromMatrix, isBoolean, isNumber, isString, isObject, isCellDescriptor};\n"]}